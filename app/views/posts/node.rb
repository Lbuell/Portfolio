/* Generated by Opal 0.5.4 */
(function($opal) {
  var $a, $b, TMP_3, $c, TMP_4, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;
  if (self.list == null) self.list = nil;
  if (self.unique == null) self.unique = nil;

  $opal.add_stubs(['$attr_reader', '$[]=', '$length', '$nil?', '$+', '$[]', '$-', '$map', '$value', '$nodes', '$each', '$puts', '$new', '$times', '$add', '$rand', '$count', '$uniq', '$dedupe']);
  (function($base, $super) {
    function $Node(){};
    var self = $Node = $klass($base, $super, 'Node', $Node);

    var def = $Node._proto, $scope = $Node._scope;
    self.$attr_reader("value");

    return (def.$initialize = function(value) {
      var self = this;
      return self.value = value;
    }, nil);
  })(self, null);
  (function($base, $super) {
    function $List(){};
    var self = $List = $klass($base, $super, 'List', $List);

    var def = $List._proto, $scope = $List._scope;
    def.nodes = def.current = def.index = nil;
    self.$attr_reader("nodes", "unique");

    def.$initialize = function() {
      var self = this;
      self.nodes = [];
      self.unique = [];
      return self.current = nil;
    };

    def.$add = function(node) {
      var self = this;
      return self.nodes['$[]='](self.nodes.$length(), node);
    };

    def.$forward = function() {
      var $a, self = this;
      if (($a = self.current['$nil?']()) !== false && $a !== nil) {
        self.index = 1
        } else {
        self.index = self.index['$+'](1)
      };
      return self.current = self.nodes['$[]'](self.index);
    };

    def.$backward = function() {
      var $a, self = this;
      if (($a = self.current['$nil?']()) !== false && $a !== nil) {
        self.index = 1
        } else {
        self.index = self.index['$-'](1)
      };
      return self.current = self.nodes['$[]'](self.index);
    };

    def.$dedupe = function() {
      var $a, $b, TMP_1, self = this;
      return self.unique = ($a = ($b = self.$nodes()).$map, $a._p = (TMP_1 = function(node){var self = TMP_1._s || this;if (node == null) node = nil;
      return node.$value()}, TMP_1._s = self, TMP_1), $a).call($b);
    };

    return (def.$print_all = function() {
      var $a, $b, TMP_2, self = this;
      return ($a = ($b = self.$nodes()).$each, $a._p = (TMP_2 = function(node){var self = TMP_2._s || this;if (node == null) node = nil;
      return self.$puts(node.$value())}, TMP_2._s = self, TMP_2), $a).call($b);
    }, nil);
  })(self, null);
  self.list = $scope.List.$new();
  ($a = ($b = (200)).$times, $a._p = (TMP_3 = function(){var self = TMP_3._s || this;
    if (self.list == null) self.list = nil;

  return self.list.$add($scope.Node.$new(self.$rand(100)))}, TMP_3._s = self, TMP_3), $a).call($b);
  self.$puts("@nodes: " + (self.list.$nodes().$count()));
  self.$puts("unique nodes: " + (self.unique));
  self.$puts("uniq node count: " + (($a = ($c = self.list.$nodes()).$map, $a._p = (TMP_4 = function(node){var self = TMP_4._s || this;if (node == null) node = nil;
  return node.$value()}, TMP_4._s = self, TMP_4), $a).call($c).$uniq().$count()));
  self.$puts("run dedupe");
  self.list.$dedupe();
  self.$puts("unique nodes: " + (self.unique));
  return self.$puts("@nodes: " + (self.list.$nodes().$count()));
})(Opal);
